{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","console","log","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","i","j","_this2","Array","from","nrows","ncols","Math","floor","random","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","row","cell","setState","style","font-size","temp","cells","r","src_Cell_0","key","value","defaultProps","changeLightsStartsOn","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f9e8e7d.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    console.log(evt);\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  } \n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    changeLightsStartsOn: .2\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.createBoard = this.createBoard.bind(this);\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.createBoard();\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = Array.from(Array(this.props.nrows), () => new Array(this.props.ncols));\n    var i, j;\n    // init board array.\n    for(i= 0; i < this.props.nrows; i++){\n      for(j=0; j < this.props.ncols; j++){\n        board[i][j] = Math.floor(Math.random() * 2);\n      }\n    }\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    \n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } \n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x);\n    flipCell(y+1,x);\n    flipCell(y-1,x);\n    flipCell(y,x-1);\n    flipCell(y,x+1);\n    // win when every cell is turned off\n    \n    // works asychronously because the value of hasWon must be evaluated \n    // before setting the state.\n    let hasWon = board.every(row => row.every(cell => !cell));\n    console.log(hasWon);\n    // TODO: determine is the game has been won\n    this.setState({board: board, hasWon: hasWon})\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    if(this.state.hasWon) {\n      return (\n      <div className='Board-align Board-neon-text'> \n        <h1 style={{'font-size': \"100px\"}} > YOU WIN </h1> \n      </div>\n      );\n    }\n    // keep this context\n    let temp = this; \n    // if the game is won, just show a winning msg & render nothing else\n    let cells = this.state.board.map(function(row, i){\n      let r = row.map(function(cell, j){\n        let coord = i + '-'+ j;\n        return (\n        <Cell \n          key={coord} \n          value={coord} isLit={cell} \n          flipCellsAroundMe={temp.flipCellsAround.bind(this, coord)}/>);\n      });\n      return <tr>{r}</tr>\n    });\n    // TODO\n    return (<div >\n              <div className='Board-align'>\n                <div className='Board-sign'>\n                  <p>Lights</p>\n                  <b><span>OU</span>T</b>\n                </div>\n              </div>\n              \n              <table className=\"Board Board-neonStagnant\">\n                <tbody>\n                  {cells}\n                </tbody>\n              </table>\n            </div>);\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}